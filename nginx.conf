user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Configurações de mime
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configurações de log
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status <span class="math-inline">body\_bytes\_sent "</span>http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 65;

    gzip on;
    gzip_disable "msie6";

    server {
        # Bloco de servidor para o host virtual admin.meusite.local.
        listen 80;
        server_name admin.meusite.local;

        # Esta configuração define o comportamento do Nginx para todas as solicitações que começam com `/`.

        location / {
            # Informa ao Nginx para encaminhar todas as solicitações para o servidor Keycloak, que está sendo executado na porta 8080.
            proxy_pass http://Keycloak:8080;

            # Redireciona todas as solicitações para a página de login do Keycloak.
            return 301 /admin;
        }

        # O tamanho máximo de cada buffer de proxy.
        proxy_buffer_size   128k;

        # O número de buffers de proxy que devem ser alocados.
        proxy_buffers   4 256k;

        # O tamanho total dos buffers de proxy que podem ser usados antes que o Nginx comece a negar novas solicitações.
        proxy_busy_buffers_size   256k;
    }

    server {
        # Bloco de servidor para o host virtual green.meusite.local
        listen 80;
        server_name green.meusite.local;

        location / {
            # Informa ao Nginx para encaminhar todas as solicitações para o servidor green, que está sendo executado.
            proxy_pass http://green:80;
        }
    }

   server {
        # Bloco de servidor para o host virtual blue.meusite.local
        listen 80;
        server_name blue.meusite.local;

        location / {
            # Informa ao Nginx para encaminhar todas as solicitações para o servidor blue, que está sendo executado.
            # O servidor blue deverá estar executando um aplicativo que pode ser acessado pelo protocolo HTTP.
            proxy_pass http://blue:80;

            # Verifica se o usuário está autenticado. Se o usuário não estiver autenticado, o Nginx redireciona o usuário para a página de login do Keycloak.
            # O Keycloak é um servidor de autenticação e autorização.
            auth_request /oauth2/auth;
            error_page 401 = @error;
        }

        location @error {
            # Redireciona o usuário para a página de login do Keycloak se o usuário não estiver autenticado.
            return 302 https://auth.meusite.local/oauth2/start?rd=https://$host$uri;
        }

        location /oauth2/auth {
            # Encaminha todas as solicitações para o servidor Keycloak.
            # O servidor Keycloak deverá estar executando um aplicativo que pode ser acessado pelo protocolo HTTP.
            proxy_pass http://blue:4180;

            # Verifica se o usuário está autenticado. Se o usuário não estiver autenticado, o Nginx redireciona o usuário para a página de login do Keycloak.
            auth_request /oauth2/auth;
            error_page 401 = @error401;
        }

        location @error401 {
            # Redireciona o usuário para a página de login do Keycloak se o usuário não estiver autenticado.
            return 302 https://auth.meusite.local/oauth2/start?rd=https://$host$uri;
        }
    }

    server {
        # Bloco de servidor para o host virtual red.meusite.local
        listen 80;  # A porta na qual o servidor Nginx escutará solicitações.
        server_name red.meusite.local;     # O nome de domínio ou endereço IP que o servidor Nginx irá atender.

        location / {
            # Informa ao Nginx para encaminhar todas as solicitações para o servidor green, que está sendo executado.    
            proxy_pass http://red:80;
        }
    }

    server {
        # Bloco de servidor para o host virtual green.meusite.local
        listen 80;  # A porta na qual o servidor Nginx escutará solicitações.
        server_name nodejs.meusite.local;     # O nome de domínio ou endereço IP que o servidor Nginx irá atender.

        location / {
            # Informa ao Nginx para encaminhar todas as solicitações para o servidor green, que está sendo executado.    
            proxy_pass http://nodejs:80;
        }
    }
}

# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user       www www;  ## Default: nobody
worker_processes  5;  ## Default: 1
error_log  logs/error.log;
pid        logs/nginx.pid;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  include    conf/mime.types;
  include    /etc/nginx/proxy.conf;
  include    /etc/nginx/fastcgi.conf;
  index    index.html index.htm index.php;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   logs/access.log  main;
  sendfile     on;
  tcp_nopush   on;
  server_names_hash_bucket_size 128; # this seems to be required for some vhosts

  server { # php/fastcgi
    listen       80;
    server_name  domain1.com www.domain1.com;
    access_log   logs/domain1.access.log  main;
    root         html;

    location ~ \.php$ {
      fastcgi_pass   127.0.0.1:1025;
    }
  }

  server { # simple reverse-proxy
    listen       80;
    server_name  domain2.com www.domain2.com;
    access_log   logs/domain2.access.log  main;

    # serve static files
    location ~ ^/(images|javascript|js|css|flash|media|static)/  {
      root    /var/www/virtual/big.server.com/htdocs;
      expires 30d;
    }

    # pass requests for dynamic content to rails/turbogears/zope, et al
    location / {
      proxy_pass      http://127.0.0.1:8080;
    }
  }

  upstream big_server_com {
    server 127.0.0.3:8000 weight=5;
    server 127.0.0.3:8001 weight=5;
    server 192.168.0.1:8000;
    server 192.168.0.1:8001;
  }

  server { # simple load balancing
    listen          80;
    server_name     big.server.com;
    access_log      logs/big.server.access.log main;

    location / {
      proxy_pass      http://big_server_com;
    }
  }
}

user       www www;  ## Default: nobody
worker_processes  5;  ## Default: 1
error_log  logs/error.log;
pid        logs/nginx.pid;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  include    conf/mime.types;
  include    /etc/nginx/proxy.conf;
  include    /etc/nginx/fastcgi.conf;
  index    index.html index.htm index.php;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   logs/access.log  main;
  sendfile     on;
  tcp_nopush   on;
  server_names_hash_bucket_size 128; # this seems to be required for some vhosts

  server { # simple reverse-proxy
    listen       8080;
    server_name  localhost;

    # pass requests for dynamic content to rails/turbogears/zope, et al
    location / {
      proxy_pass      http://admin.meusite.local:8080;
    }
  }
}
